#1 (10 neuron) Hidden Layer Neural Network

#CV2 for webcam
import cv2
import random
import numpy as np
import math
import tensorflow as tf
#Data Set
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import imageCropping
import PIL
from PIL import Image
import tkinter as tk
from PIL import Image, ImageTk

#Personal Data Examples
myTest = Image.open(r"C:\Users\david\OneDrive\Pictures\Screenshots\whiteout3.png")
#myTest.show()

def prepare_personal_sample(file, webcam=False):

    #Optional Display
    '''img = mpimg.imread(file)
    #disp
    plt.imshow(img)
    plt.show()'''

    image = Image.open(file)

    MNIST_size = (28, 28)
    image = image.resize(MNIST_size)

    image = image.convert('L')#Greyscale

    pixelVal_list = list(image.getdata())#length of 784

    if webcam == False:
        for i in range(len(pixelVal_list)):
            pixelVal_list[i] = np.abs(pixelVal_list[i]  - 255 )#color invert on a screenshot or uploaded image
    else:
        for i in range(len(pixelVal_list)):

            #THIS IS A SPECIFIC TECHNIQUE FOR WEBCAM FEED
            #This is because handwritting is dark, 0
            if(pixelVal_list[i] < 20):#aka, the dark part, the handwritten part
                pixelVal_list[i] = 255
            elif (pixelVal_list[i] > 80):
                pixelVal_list[i] = 0
            else:
                pixelVal_list[i] = np.abs(pixelVal_list[i]  - 255 )#final color invert
        
    image_array = np.array(pixelVal_list)

    return image_array


def show_finalized_784_as_image(image_array):

    #print(image_array.shape())

    root = tk.Tk()
    root.title("Canvas Example")

    canvas_width = 300
    canvas_height = 300

    canvas = tk.Canvas(root, width=canvas_width, height=canvas_height, bg="white")
    canvas.pack()

    counter = 0

    l = 10

    for y in range(28):
        for x in range(28):
            c = image_array[counter]
           #colorPix(image, x, y, (c,c,c))
            my_color = '#%02x%02x%02x' % (int(c),int(c),int(c))
            canvas.create_rectangle(x + x * l,y + y * l, x + (x + 1)* l, y + (y + 1)* l, fill=my_color)
            counter += 1
             

    #img_lab.config(image = image)

    root.mainloop()

#No longer using this section    
'''    
def prepare_personal_grid_sample(image):

    MNIST_size = (28, 28)
    image = image.resize(MNIST_size)

    image = image.convert('L')#greyscale

    pixelVal_list = list(image.getdata())#length of 784

    for i in range(len(pixelVal_list)):
        pixelVal_list[i] = np.abs(pixelVal_list[i] - 255)#final color invert
    
    image_array = np.array(pixelVal_list)

    return image_array
'''
    

image3array = prepare_personal_sample(r"C:\Users\david\OneDrive\Pictures\Screenshots\whiteout3.png")
image4array = prepare_personal_sample(r"C:\Users\david\OneDrive\Pictures\Screenshots\whiteout4.png")
image8array = prepare_personal_sample(r"C:\Users\david\OneDrive\Pictures\Screenshots\whiteout8.png")
image6array = prepare_personal_sample(r"C:\Users\david\OneDrive\Pictures\Screenshots\whiteout6.png")
image0array = prepare_personal_sample(r"C:\Users\david\OneDrive\Pictures\Screenshots\whiteout0.png")

#DATA IMPORT

(trainImage, trainLabel), (testImage, testLabel) = mnist.load_data()

#make np arrays
trainImage = np.array(trainImage)
#the labels are just lists of the numbers that the images are of
testImage = np.array(testImage)

Label_test = testLabel
X_test = testImage

Label_train = trainLabel
X_train = trainImage

#REFORMATTING TRAINING IMAGES
reformatted = np.zeros((60000,784))
localRow = []
counter = 0;
for image in trainImage:#(s)
    for row in image:#(image)
        for item in row:
            localRow.append(item)   #scalling it down, so a 255 would = 1         
    reformatted[counter] = localRow
    localRow = []
    counter += 1

X_train = reformatted
X_train = X_train / 255

#REFORMATTING TESTING IMAGES
reformattedTest = np.zeros((60000,784))
localRowTest = []
counterTest = 0;
for imageTest in testImage:#(s)
    for rowTest in imageTest:#(image)
        for itemTest in rowTest:
            localRowTest.append(itemTest)   #scalling it down, so a 255 would = 1         
    reformattedTest[counterTest] = localRowTest
    localRowTest = []
    counterTest += 1

X_test = reformattedTest

#Show demos
for i in range(5):
    show_finalized_784_as_image((X_test[i]))

X_test = X_test / 255 #put into black number, white background?
'''End test format'''




print(X_train[0].shape)
#makes groups of 784row * 1colm matrixes 
      
def init_params():
    #weights for fiirst layer

    #hidden_layer_size
    hls = 50
    
    W1 = np.random.rand(hls,784) - 0.5 #between -0.5 and 0.5
    b1 = np.random.rand(hls,1) - 0.5


    W2 = np.random.rand(10,hls) - 0.5
    b2 = np.random.rand(10,1) - 0.5
    return W1, b1, W2, b2


#ACTIVATION FUNCTIONS
def ReLU(Z):
    return np.maximum(0, Z)

def deriv_ReLU(z):
    return z > 0;

def sigmoid(z):
    """The sigmoid function."""

    z = z/(max(abs(z )))

    return 1.0/(1.0+np.exp(-z))


def sigmoid_prime(z):
    """Derivative of the sigmoid function."""
    return sigmoid(z)*(1-sigmoid(z))



def softmax(z):#not exactly sure how this one works
    A = np.exp(z) / sum(np.exp(z))

    
    return A


def Forward_Propogation(W1, b1, W2, b2, X): #applying everything forwards
    #calculate that value
    #where X is a 784 by 1 of the pixels, need to figure out how to do that part
    
    unsigm_nrn_1 = W1.dot(X) + b1
    '''print("unsigm_nrn_1")
    print(unsigm_nrn_1.shape)'''
    
    nrn_1 = sigmoid(unsigm_nrn_1) #sigmoid activation
    '''print("nrn_2")
    #print(nrn_1)'''
    
    unsigm_nrn_2 = W2.dot(nrn_1) + b2
    #print(unsigm_nrn_2)
    nrn_2 = softmax(unsigm_nrn_2)
    

    return unsigm_nrn_1, nrn_1, unsigm_nrn_2, nrn_2


def Format_Label_As_Vector(Label):
    #creating a matrix like so: [0,0,1,0....0] , in that case, the label is "2"
    #Label is the labeling set
    Format_Label_As_Vector_Label = np.zeros((Label.size, 10))#Label.max() + 1))#+1 bc we are starting w/ 0 as digit
    Format_Label_As_Vector_Label[np.arange(Label.size), Label] = 1
    Format_Label_As_Vector_Label = Format_Label_As_Vector_Label.T #transposed
    #go to that row, and for that row val (0-9), set that one = TO Label (0-9)
    #each collumn is the onehot for each image I think

    return Format_Label_As_Vector_Label

    

def Backwards_Propogation(unsigm_nrn_1, nrn_1, unsigm_nrn_2, nrn_2, W2, X, Label):
    m = Label.size #size of Label, labels
    
    Format_Label_As_Vector_Label = Format_Label_As_Vector(Label)
    dunsigm_nrn_2 = nrn_2 - Format_Label_As_Vector_Label # error I think? Why not error squared??
    dW2 = 1 / m * dunsigm_nrn_2.dot(nrn_1.T) # a learning rate 1/m proportional to size??
    db2 = 1 / m * np.sum(dunsigm_nrn_2)#what is the 2 for?
    #dunsigm_nrn_1 = W2.T.dot(dunsigm_nrn_2) * deriv_ReLU(unsigm_nrn_1)
    dunsigm_nrn_1 = W2.T.dot(dunsigm_nrn_2) * sigmoid_prime(unsigm_nrn_1)
    
    dW1 = 1/ m * dunsigm_nrn_1.dot(X.T)
    db1 = 1 / m * np.sum(dunsigm_nrn_1)

    return dW1, db1, dW2, db2

def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):#here is alpha the learning rate
    W1 = W1 - alpha * dW1
    b1 = b1 - alpha * db1
    W2 = W2 - alpha * dW2
    b2 = b2 - alpha * db2

    return W1, b1, W2, b2

#25:10


def get_predictions(nrn_2):
    return np.argmax(nrn_2, 0)

def get_confidence(nrn_2):
    return ((max(nrn_2) / 1) * 100)

def get_accuracy(predictions, Label):
    #print(predictions, Label)
    return np.sum(predictions == Label) / Label.size

def gradient_descent(X, Label, iterations, alpha, W1, b1, W2, b2):

    for i in range(iterations):

        imageMatrix = X[i][:,np.newaxis]
        
        unsigm_nrn_1, nrn_1, unsigm_nrn_2, nrn_2 = Forward_Propogation(W1, b1, W2, b2, imageMatrix)#individual images

        '''print(nrn_2)
        print("AZ above")
        print(Format_Label_As_Vector(Label[i]))
        print("one hot above")'''
        
        dW1, db1, dW2, db2 = Backwards_Propogation(unsigm_nrn_1, nrn_1, unsigm_nrn_2, nrn_2, W2, imageMatrix, Label[i])
        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)
        
        #progress updates
        if i % 2000 == 0:
            print("Iteration: ", i, "Prediction", get_predictions(nrn_2), "Actual", Label[i])
            #print("Accuracy: ", get_accuracy(get_predictions(nrn_2), Label[i]))
            #print("Prediction", get_predictions(nrn_2))
            #print("Actual", Label[i])
        
    return W1, b1, W2, b2
            #work on getPredictions)
    
#TRAINING THE MODEL
alp = 0.35
W1, b1, W2, b2 = init_params()
W1, b1, W2, b2 = gradient_descent(X_train, Label_train, 50000, alp, W1, b1, W2, b2)#500 iterations


def test_image(Xtest, Labeltest, index):
    imageMatrix = Xtest[index][:,np.newaxis]
        
    unsigm_nrn_1, nrn_1, unsigm_nrn_2, nrn_2 = Forward_Propogation(W1, b1, W2, b2, imageMatrix)#individual images

    print(nrn_3)
    print("AZ above")
    print(Format_Label_As_Vector(Labeltest[index]))
    print("one hot above")  

    print("image number: ", index)
    #print("Accuracy: ", get_accuracy(get_predictions(nrn_2), Label[i]))
    print("Prediction", get_predictions(nrn_3))
    #print("Actual", Labeltest[index])
    
def test_image_individual_upload(Xtest, showImg=False):
    imageMatrix = Xtest[:,np.newaxis]

        
    unsigm_nrn_1, nrn_1, unsigm_nrn_2, nrn_2 = Forward_Propogation(W1, b1, W2, b2, imageMatrix)#individual images

    '''print(nrn_2)
    print("AZ above")
    print(Format_Label_As_Vector(Labeltest[index]))
    print("one hot above")  '''

    #print("image number: ", index)
    #print("Accuracy: ", get_accuracy(get_predictions(nrn_2), Label[i]))
    print("Prediction for uploaded image", get_predictions(nrn_2))
    #print("Percent Confidence", round(get_confidence(nrn_2)[0]))
    #print("Actual", Labeltest[index])

    if (showImg):
        show_finalized_784_as_image(imageMatrix)


#test_image(X_test, Label_test, 1)
#test_image(X_test, Label_test, 2)
#test_image(X_test, Label_test, 200)
    

def find_test_image_accuracy(Xtest, Labeltest, sizeOfTest, atot):
    
    for i in range(sizeOfTest):

        imageMatrix = Xtest[i][:,np.newaxis]
        
        unsigm_nrn_1, nrn_1, unsigm_nrn_2, nrn_2 = Forward_Propogation(W1, b1, W2, b2, imageMatrix)#individual images

        atot = atot + get_accuracy(get_predictions(nrn_2), Labeltest[i])
        
        
    return (atot / sizeOfTest)

accTot = 0.0

acc = find_test_image_accuracy(X_test, Label_test, 10000, accTot)
    
print(acc)

print("BIG TEST BELOW!")
print("Testing a 3")
test_image_individual_upload(image3array, True)
print("Testing a 4")
test_image_individual_upload(image4array, True)
print("Testing an 8")
test_image_individual_upload(image8array,True)
print("Testing a 6")
test_image_individual_upload(image6array,True)
print("Testing a 0")
test_image_individual_upload(image0array,True)



#live file upload?
'''
print()
print()
live_file_1 = input('now lets test a brand new image!')
live_file_1_array = prepare_personal_sample(live_file_1)
print("HERE is the RESULT...")
test_image_individual_upload(live_file_1_array,True)
'''
#show_finalized_784_as_image(image8array)

'''
print()
print("Weights1:")
print(list(W1))

print("Biases1:")
print(list(b1))


print("Weights2:")
print(list(W2))

print("Biases2:")
print(list(b2))'''


#a = input("a, 1-10")
#b = input("b, 1-10")
#a,b = 1,1


#gridIM = access_grid_data(r"C:\Users\david\OneDrive\Pictures\Screenshots\gridData.png",
                            #   9, 1, 5, 5,
                            #   a,b)
#gridIM.show
#print(gridIM.getdata)
    
#grid_array = prepare_personal_grid_sample(access_grid_data(r"C:\Users\david\OneDrive\Pictures\Screenshots\gridData.png",
                           #    9, 1, 5, 5,
                            #   a,b))#prepare for algorithm
#print("Testing grid val!")
#test_image_individual_upload(grid_array)




# Initialize the webcam
capture = cv2.VideoCapture(1)


# Check if the webcam is opened correctly
if not capture.isOpened():
   raise IOError("Cannot open webcam")

while(True):
   # Read a frame from the webcam
   ret, frame = capture.read()
   if not ret:
       break
  
   # Display the resulting frame
   cv2.imshow('Webcam Feed', frame)

   cv2.imwrite('captured_image.png', frame)
   live_array = prepare_personal_sample('captured_image.png', True)#prepare for algorithm
   #print("Testing live camera feed!!")

    #moved this section to the waitkey

   #Uncomment this for a actually live result
   #test_image_individual_upload(live_array)

   if cv2.waitKey(1) == ord('c'):
       test_image_individual_upload(live_array)
       show_finalized_784_as_image(live_array)
 
   # Press 'q' to exit
   if cv2.waitKey(1) & 0xFF == ord('q'):
       break

# Release the capture and destroy all windows
capture.release()
cv2.destroyAllWindows()


